% Encoding: UTF-8

@Thesis{Berglund2013,
  author      = {Berglund, Per},
  title       = {Shard Selection in Distributed Collaborative Search Engines},
  year        = {2013},
  abstract    = {To increase their scalability and reliability many search engines today are distributed
systems. In a distributed search engine several nodes collaborate in handling the search
operations. Usually each node is only responsible for one or a few parts of the index
used for storing and searching. These smaller index parts are usually referred to as
shards.
Lately ElasticSearch has emerged as a popular distributed search engine intended for
medium- and large scale searching. An ElasticSearch cluster could potentially consist of
a lot of nodes and shards. Sending a search query to all nodes and shards might result
in high latency when the size of the cluster is large or when the nodes are far apart
from each other. ElasticSearch provides some features for limiting the number of nodes
which participate in each search query in special cases, but generally each query will be
processed by all nodes and shards.
Shard selection is a method used to only forward queries to the shards which are estimated
to be highly relevant to a query. In this thesis a shard selection plugin called
SAFE has been developed for ElasticSearch. SAFE implements four state of the art
shard selection algorithms and supports all current query types in ElasticSearch. The
purpose of SAFE is to further increase the scalability of ElasticSearch by limiting the
number of nodes which participate in each search query. The cost of using the plugin is
that there might be a negative effect on the search results.
The purpose of this thesis has been to evaluate to which extent SAFE affects the search
results in ElasticSearch. The four implemented algorithms have been compared in three
different experiments using two different data sets. Two new metrics called Pk@N and
Modified Recall have been developed for this thesis which measures the relative performance
between exhaustive search and shard selection in a search engine like ElasticSearch.
The results indicate that three algorithms in SAFE perform very well when documents
are distributed to shards depending on which linguistic topic they belong to. However if
documents are randomly allocated to shards, which is the standard approach in ElasticSearch,
then SAFE does not show any significant results and seems to be unusable.
This thesis shows that if a suitable document distribution policy is used and there is a
tolerance for losing some relevant documents in the search results then a shard selection
implementations like SAFE could be used to further increase the scalability of a
distributed search engine, especially in a low resource environment.},
  date        = {2013-06},
  institution = {University of Gothenburg},
  keywords    = {elasticsearch, shard selection, SAFE, scalability},
  type        = {mathesis},
  url         = {https://findwise.com/labs/sites/default/files/reports/shard_selection_elastics.pdf},
}

@Online{Brasetvik2013,
  author   = {Brasetvik, Alex},
  title    = {Elasticsearch as a NoSQL Database},
  month    = {09},
  year     = {2013},
  note     = {Geraadpleegd op 12-09-2017},
  abstract = {Can Elasticsearch be used as a "NoSQL"-database? NoSQL means different things in different contexts, and interestingly it's not really about SQL. We will start out with a "Maybe!", and look into the various properties of Elasticsearch as well as those it has sacrificed, in order to become one of the most flexible, scalable and performant search and analytics engines yet.},
  keywords = {elasticsearch, database, transactions, relations, constraints, security},
  url      = {https://www.elastic.co/blog/found-elasticsearch-as-nosql},
}

@Thesis{Glauner2012,
  author      = {Glauner, Patrick Oliver},
  title       = {Enhancing Invenio Digital Library With An External Relevance Ranking Engine},
  year        = {2012},
  abstract    = {Invenio is a comprehensive web-based free digital library software
suite originally developed at CERN. In order to improve its information
retrieval and word similarity ranking capabilities, the goal of this thesis
is to enhance Invenio by bridging it with modern external information
retrieval systems. In the first part a comparison of various information
retrieval systems such as Solr and Xapian is made. In the second part a
system-independent bridge for word similarity ranking is designed and
implemented. Subsequently, Solr and Xapian are integrated in Invenio
via adapters to the bridge. In the third part scalability tests are
performed. Finally, a future outlook is briefly discussed.},
  date        = {2012-09},
  institution = {Hochschule Karlsruhe Technik und Wirtschaft},
  keywords    = {Document management, ranking, search, information retrieval, Solr, Xapian, elasticsearch, Python },
  timestamp   = {2018-03-31},
  type        = {bathesis},
  url         = {https://cds.cern.ch/record/1456329/files/CERN-THESIS-2012-074.pdf},
}

@Book{Dixit2016,
  title     = {Elasticsearch Essentials},
  publisher = {Packt Publishing},
  year      = {2016},
  author    = {Bharvi Dixit},
  timestamp = {2018-04-27},
}

@Misc{Babaev2013,
  author = {Dmitri Babaev},
  title  = {Elasticsearch cluster},
  year   = {2013},
  note   = {Geraadpleegd op 28-04-2018},
  url    = {https://image.slidesharecdn.com/elasticsearchmoscowbigdata-cassandrasept2013meetup-130914151418-phpapp01/95/elasticsearch-as-a-distributed-nosql-db-4-638.jpg?cb=1379171830},
}

@Misc{Turner,
  author = {Alex Turner},
  title  = {Best Elasticsearch Books From Beginner To Expert},
  note   = {Geraadpleegd op 05-05-2018},
  url    = {http://whatpixel.com/best-elasticsearch-books/},
}

@Misc{Algolia,
  title = {Algolia Tutorials},
  note  = {Geraadpleegd op 12-05-2018},
  url   = {https://www.algolia.com/doc/tutorials/},
}

@Misc{Solr,
  title = {Solr features},
  note  = {Geraadpleegd op 12/05/2018},
  url   = {http://lucene.apache.org/solr/features.html},
}

@Misc{Elasticsearch,
  title = {Elasticsearch Tutorials},
  note  = {Geraadpleegd op 12-05-2018},
  url   = {https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html},
}

@MastersThesis{Whissel2009,
  author    = {Jhon Whissel},
  title     = {Information retrieval using Lucene and Wordnet},
  school    = {The University of Akron},
  year      = {2009},
  abstract  = {This thesis outlines the use of Apache Lucene, its subproject Nutch, and WordNet as tools
for information retrieval, a science of searching through data in order to obtain
knowledge that has become increasingly relevant in the Information Age. Lucene is a
software library released by the Apache Software Foundation which provides information
retrieval capabilities to programmers. Nutch, based on Lucene, adds Internet search
functionality. WordNet is a lexical database which groups similar words into sets of
synonyms, or synsets, and tracks their semantic relationships. This creates a combination
of a dictionary and a thesaurus which may be browsed as such or used in software
applications. Lucene and Nutch are released under the Apache Software License and are
free and open source. WordNet is released under a similar license. The availability of free
and open source tools such as Lucene, Nutch, and WordNet grants software developers a
base from which they may create applications that can be tailored to their specifications,
while simultaneously eliminating the need to create the entire code base for their projects
from scratch. This practice can result in reduced programming time and lower software
development costs. The remainder of this document outlines the use of these tools and
then presents the methodology for the integration of their combined capabilities into a
search engine capable of online information retrieval. This discussion culminates with a
demonstration of how WordNet may be employed to remove search query ambiguity.},
  timestamp = {2018-05-18},
  url       = {https://etd.ohiolink.edu/rws_etd/document/get/akron1253659613/inline},
}

@Misc{Brasetvik2017,
  author    = {Alex Brasetvik},
  title     = {Elasticsearch and Lucene's architecture},
  month     = jul,
  year      = {2017},
  timestamp = {2018-05-19},
  url       = {https://www.youtube.com/watch?v=kmMlR9G-64c},
}

@MastersThesis{Tahir2008,
  author    = {Muhammad Tahir and Aleem Tariq},
  title     = {Quality of the Open Source Software},
  school    = {Blekinge Institute of Technology},
  year      = {2008},
  abstract  = {Quality and security of software are key factors in the software development. This thesis deals
with the quality of open source software (OSS for short) and different questions that are related
with open source and close source software has discussed in the thesis proposal. Open source
software is a process by which we can produce cheap and qualitative software and its source
could be re-use in the development of the software. Close source software is more expensive
than open source software and we can not re-use its source code, so there should be a way by
which cheap and qualitative software should be produced. This thesis describes that how the
quality of the open source software can be evaluated and increased. There are different factors
which are helpful to increase the software quality these factors are low cycle time, low cost and
small size of software. These factors are also helpful for the development of software product
according to the requirement of clients and the users of that software. This thesis also describes
the security and performance of close and open source software and it also analyze different
software development processes. The quality of OSS can be increased by use of best evaluation
techniques, best quality measurement, best development tools and best development process.
There are also many challenges for OSS, which it has to face for improvement of the quality of
OSS. Initially there were many drawbacks in open source software but with the passage of time
improvement has produced in it. This thesis also describes the compression, advantages and
disadvantages of the close source and open source software.},
  timestamp = {2018-05-19},
  url       = {https://www.diva-portal.org/smash/get/diva2:828415/FULLTEXT01.pdf},
}

@Comment{jabref-meta: databaseType:bibtex;}
